/*
	ImageLib.h - Header for Image Library DLL

	Copyright (c) 2003, Blaine Myers
*/
#ifndef __IMAGELIB_H__
#define __IMAGELIB_H__
#include <windows.h>

#define MAX_BITMAPS 10
#define IMAGE_NAME_LENGTH 15
#define DEFAULT_MAX_ENTRIES 256

//Unicode Names
#ifdef UNICODE
#define OpenBitmap OpenBitmapW
#define OpenBitmapOffset OpenBitmapOffsetW
#define GetBitmapName GetBitmapNameW
#define GetImageName GetImageNameW
#define AddBitmap AddBitmapW
#define SetBitmap SetBitmapW
#define AddEntry AddEntryW
#define SetEntry SetEntryW
#define AutoGenerateData AutoGenerateDataW
#define SaveData SaveDataW
#define LoadData LoadDataW
#define BuildLibrary BuildLibraryW
#define ImportLibrary ImportLibraryW
#define LoadArchive LoadArchiveW

#else //UNICODE
#define OpenBitmap OpenBitmapA
#define OpenBitmapOffset OpenBitmapOffsetA
#define GetBitmapName GetBitmapNameA
#define GetImageName GetImageNameA
#define AddBitmap AddBitmapA
#define SetBitmap SetBitmapA
#define AddEntry AddEntryA
#define SetEntry SetEntryA
#define AutoGenerateData AutoGenerateDataA
#define SaveData SaveDataA
#define LoadData LoadDataA
#define BuildLibrary BuildLibraryA
#define ImportLibrary ImportLibraryA
#define LoadArchive LoadArchiveA

#endif //UNICODE


typedef struct tagIMAGEDATA{
	WORD nBitmap; //reference to which bitmap contains the image
	WORD nX; //x origin on reference bitmap
	WORD nY; //y origin on reference bitmap
	WORD nWidthSrc; //width on reference bm
	WORD nHeightSrc; //height on reference bm
	WORD nWidth; //width of bitmap
	WORD nHeight; //height of bitmap
	WORD nFrames; //number of frames following to make up sprite
	WCHAR szImgLabel[IMAGE_NAME_LENGTH+1]; //name given to image convert to multibyte for ansi
}IMAGEDATA;

typedef struct tagIMGLIBHEADER{
	WORD	wType; //The type of file "IL"
	WORD	nVersion; //version 10 for database 20 for library build
	DWORD	lReserved1; //reserved
	DWORD	lReserved2; //reserved
	WORD	nOffsetBytes; //how many bytes offset for the data Header
} IMGLIBHEADER;

typedef struct tagIMGDBHEADER{
	DWORD nEntries; //number of entries in database
	WORD nNumBMs; //the amount of bitmaps
	DWORD nSizeofEntryData; //size of entry data
}IMGDBHEADER;


typedef struct tagIMGHEADER{
	DWORD	nEntrys; //number of entries
	WORD nNumBMs; //the amount of bitmaps
	DWORD	nSizeofEntryData; //size of entry data
	DWORD nSizeofBitmapInfo; //size of bitmap offset and size info
}IMGHEADER;

typedef struct tagBITMAPDATA{
	DWORD dwOffset;
	DWORD dwSize;
}BITMAPDATA;


class CImageLibrary{
protected:
	DWORD m_nNumImages;

	IMAGEDATA *m_pImageData;

	HBITMAP m_hBitmap[MAX_BITMAPS];
	char m_szBitmapFilenameA[MAX_BITMAPS][MAX_PATH];
	WCHAR m_szBitmapFilenameW[MAX_BITMAPS][MAX_PATH];

	WORD m_nNumBitmaps;
	
public:
	CImageLibrary();
	~CImageLibrary();
	DWORD GetNumEntries();
	WORD GetNumBitmaps();

	HRESULT OpenBitmapA(LPSTR szFilename, WORD nBitmap);
	HRESULT OpenBitmapW(LPWSTR szFilename, WORD nBitmap);

	HRESULT OpenBitmapOffsetA(LPSTR szFilename, DWORD nOffset, WORD nBitmap);
	HRESULT OpenBitmapOffsetW(LPWSTR szFilename, DWORD nOffset, WORD nBitmap);

	void GetBitmapNameA(char szName[], WORD nBitmap);
	void GetBitmapNameW(WCHAR szName[], WORD nBitmap);

	HBITMAP GetBitmap(WORD nBitmap);

	void CloseMainBitmaps();
	HRESULT ClearDataBase();
	HRESULT CopyImageToDC(HDC hdcDest, DWORD nEntry, int x, int y, BOOL bTransp);
	HRESULT StretchImageToDC(HDC hdcDest, DWORD nEntry, int x, int y, int nWidth, int nHeight, BOOL bTransp);

	BOOL GetImageNameA(char szImageName[], DWORD nEntry);
	BOOL GetImageNameW(WCHAR szImageName[], DWORD nEntry);
	WORD GetNumFrames(DWORD nEntry);

	BOOL GetImageData(DWORD nEntry, IMAGEDATA *imgData);
};

class CEditImageLibrary: public CImageLibrary{
protected:
	DWORD m_nMaxEntries;
	//DWORD m_nSelectedEntry;

public:
	CEditImageLibrary();
	CEditImageLibrary(DWORD nMaxEntries);
	~CEditImageLibrary();

	/*
	void SetSelectedEntry(DWORD nEntry);
	DWORD GetSelectedEntry();
	*/

	HRESULT AddBitmapA(LPSTR szFilename);
	HRESULT AddBitmapW(LPWSTR szFilename);

	HRESULT SetBitmapA(WORD nReference, LPSTR szFilename);
	HRESULT SetBitmapW(WORD nReference, LPWSTR szFilename);

	void SetNumBitmaps(WORD nNumBitmaps);

	HRESULT AddEntryA(WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBitmap, WORD nFrames, LPSTR szImageName);
	HRESULT AddEntryW(WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBtimap, WORD nFrames, LPWSTR szImageName);
	
	HRESULT SetEntryA(DWORD nReference, WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBitmap, WORD nFrames, LPSTR szImageName);
	HRESULT SetEntryW(DWORD nReference, WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBitmap, WORD nFrames, LPWSTR szImageName);
	
	void SetNumEntries(DWORD nNumEntries);
	
	HRESULT AutoGenerateDataA(WORD nBitmap, WORD nWidth, WORD nHeight, WORD nXSpacing, WORD nYSpacing, BOOL bClear);
	HRESULT AutoGenerateDataW(WORD nBitmap, WORD nWidth, WORD nHeight, WORD nXSpacing, WORD nYSpacing, BOOL bClear);
	
	void ClearDataBase();

	HRESULT SaveDataA(LPSTR szFilename);
	HRESULT SaveDataW(LPWSTR szFilename);

	HRESULT LoadDataA(LPSTR szFilename);
	HRESULT LoadDataW(LPWSTR szFilename);

	HRESULT BuildLibraryA(LPSTR szFilename);
	HRESULT BuildLibraryW(LPWSTR szFilename);

	HRESULT ImportLibraryA(LPSTR szFilename);
	HRESULT ImportLibraryW(LPWSTR szFilename);

};

class CImageArchive: public CImageLibrary{
protected:
	DWORD m_nSelectedEntry;
public:
	CImageArchive();
	~CImageArchive();
	HRESULT LoadArchiveA(LPSTR szFilename);
	HRESULT LoadArchiveW(LPWSTR szFilename);

	DWORD GetSelectedEntry();
	BOOL SetSelectedEntry(DWORD nEntry);

	void CloseArchive();
};

#endif //__IMAGELIB_H__