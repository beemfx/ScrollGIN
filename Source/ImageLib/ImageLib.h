/*
	ImageLib.h - Header for Image Library DLL

	Copyright (c) 2003, Blaine Myers
*/
#ifndef __IMAGELIB_H__
#define __IMAGELIB_H__
#include <windows.h>

static const int MAX_BITMAPS = 10;
static const int IMAGE_NAME_LENGTH=15;
static const int DEFAULT_MAX_ENTRIES=256;

struct IMAGEDATA
{
	WORD nBitmap; //reference to which bitmap contains the image
	WORD nX; //x origin on reference bitmap
	WORD nY; //y origin on reference bitmap
	WORD nWidthSrc; //width on reference bm
	WORD nHeightSrc; //height on reference bm
	WORD nWidth; //width of bitmap
	WORD nHeight; //height of bitmap
	WORD nFrames; //number of frames following to make up sprite
	WCHAR szImgLabel[IMAGE_NAME_LENGTH+1]; //name given to image convert to multibyte for ansi
};

struct IMGLIBHEADER
{
	WORD	wType; //The type of file "IL"
	WORD	nVersion; //version 10 for database 20 for library build
	DWORD	lReserved1; //reserved
	DWORD	lReserved2; //reserved
	WORD	nOffsetBytes; //how many bytes offset for the data Header
};

struct IMGDBHEADER
{
	DWORD nEntries; //number of entries in database
	WORD nNumBMs; //the amount of bitmaps
	DWORD nSizeofEntryData; //size of entry data
};


struct IMGHEADER
{
	DWORD	nEntrys; //number of entries
	WORD nNumBMs; //the amount of bitmaps
	DWORD	nSizeofEntryData; //size of entry data
	DWORD nSizeofBitmapInfo; //size of bitmap offset and size info
};

struct BITMAPDATA
{
	DWORD dwOffset;
	DWORD dwSize;
};


class CImageLibrary
{
protected:
	DWORD m_nNumImages;

	IMAGEDATA *m_pImageData;

	HBITMAP m_hBitmap[MAX_BITMAPS];
	char m_szBitmapFilenameA[MAX_BITMAPS][MAX_PATH];

	WORD m_nNumBitmaps;
	
public:
	CImageLibrary();
	~CImageLibrary();

	DWORD   GetNumEntries();
	WORD    GetNumBitmaps();
	HRESULT OpenBitmap(LPSTR szFilename, WORD nBitmap);
	HRESULT OpenBitmapOffset(LPCSTR szFilename, DWORD nOffset, WORD nBitmap);
	void    GetBitmapName(char* Out, size_t OutSize, WORD nBitmap);
	HBITMAP GetBitmap(WORD nBitmap);
	void    CloseMainBitmaps();
	HRESULT ClearDataBase();
	HRESULT CopyImageToDC(HDC hdcDest, DWORD nEntry, int x, int y, BOOL bTransp);
	HRESULT StretchImageToDC(HDC hdcDest, DWORD nEntry, int x, int y, int nWidth, int nHeight, BOOL bTransp);
	BOOL    GetImageName(char* Out, size_t OutSize , DWORD nEntry );
	WORD    GetNumFrames(DWORD nEntry);
	BOOL    GetImageData(DWORD nEntry, IMAGEDATA *imgData);
};

class CEditImageLibrary: public CImageLibrary
{
protected:
	DWORD m_nMaxEntries;
public:
	CEditImageLibrary();
	CEditImageLibrary(DWORD nMaxEntries);
	~CEditImageLibrary();

	HRESULT AddBitmap(LPSTR szFilename);
	HRESULT SetBitmap(WORD nReference, LPSTR szFilename);
	void    SetNumBitmaps(WORD nNumBitmaps);
	HRESULT AddEntry(WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBitmap, WORD nFrames, LPSTR szImageName);
	HRESULT SetEntry(DWORD nReference, WORD x, WORD y, WORD nWidthSrc, WORD nHeightSrc, WORD nWidth, WORD nHeight, WORD nBitmap, WORD nFrames, LPSTR szImageName);
	void    SetNumEntries(DWORD nNumEntries);
	HRESULT AutoGenerateData(WORD nBitmap, WORD nWidth, WORD nHeight, WORD nXSpacing, WORD nYSpacing, BOOL bClear);
	void    ClearDataBase();
	HRESULT SaveData(LPSTR szFilename);
	HRESULT LoadData(LPSTR szFilename);
	HRESULT BuildLibrary(LPSTR szFilename);
	HRESULT ImportLibrary(LPSTR szFilename);
};

class CImageArchive: public CImageLibrary
{
protected:
	DWORD m_nSelectedEntry;
public:
	CImageArchive();
	~CImageArchive();

	HRESULT LoadArchive(LPCSTR szFilename);
	DWORD   GetSelectedEntry();
	BOOL    SetSelectedEntry(DWORD nEntry);
	void    CloseArchive();
};

#endif //__IMAGELIB_H__